@page "/"
@using EncriptionApp.Service
@using CommunityToolkit.Maui.Storage;
@inject EncriptionService EncriptionService
@inject LocalizationService Lang
@using System.IO
@using Microsoft.AspNetCore.Components.Forms

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />

<style>
    /* التصميم العام */
    body {
    background: linear-gradient(45deg, #141e30, #243b55);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* حاوية التنبيه ثابتة دائمًا في أسفل الشاشة وتغطي كامل العرض */
    .alert-container {
    position: fixed;
    bottom: 20px;
    left: 0;
    right: 0;
    text-align: center;
    z-index: 1000;
    }

    .alert {
    display: inline-block;
    background-color: rgba(0, 0, 0, 0.8);
    color: #fff;
    padding: 15px 20px;
    border-radius: 5px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    animation: fadeInUp 0.5s ease-out;
    }

    /* أنميشن الظهور من الأسفل */
    @@keyframes fadeInUp {
    0%

    {
    opacity: 0;
    transform: translateY(20px);
    }

    100% {
    opacity: 1;
    transform: translateY(0);
    }

    }

    .container {
    max-width: 600px;
    margin: 50px auto;
    padding: 30px;
    background: rgba(255,255,255,0.1);
    border-radius: 15px;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    backdrop-filter: blur(8.5px);
    -webkit-backdrop-filter: blur(8.5px);
    border: 1px solid rgba(255, 255, 255, 0.18);
    animation: slideIn 0.8s ease-out;
    }
    /* Language Selector Container */
    .language-selector {
    position: absolute;
    top: 20px;
    right: 20px;
    z-index: 1000;
    }

    .lang-toggle {
    display: flex;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 5px;
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .lang-btn {
    padding: 8px 20px;
    border: none;
    background: none;
    color: #ffffff;
    cursor: pointer;
    transition: all 0.3s ease;
    border-radius: 6px;
    font-size: 14px;
    }

    .lang-btn.active {
    background: #1e90ff;
    box-shadow: 0 2px 8px rgba(30, 144, 255, 0.3);
    }

    .lang-btn:not(.active):hover {
    background: rgba(30, 144, 255, 0.2);
    }
    @@keyframes slideIn {
    from

    {
    opacity: 0;
    transform: translateY(20px);
    }

    to {
    opacity: 1;
    transform: translateY(0);
    }

    }

    .title {
    color: #ffffff;
    font-size: 28px;
    margin-bottom: 20px;
    text-align: center;
    }

    .input-group {
    margin-bottom: 20px;
    }
    /* تنسيق مجموعة تبديل العملية */
    .toggle-group {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
    }

    .toggle-buttons {
    display: flex;
    justify-content: center;
    border: 1px solid #1e90ff;
    border-radius: 8px;
    overflow: hidden;
    margin-top: 5px;
    margin-bottom: 20px;
    }

    .toggle-button {
    flex: 1;
    padding: 10px;
    background: transparent;
    border: none;
    color: #ffffff;
    cursor: pointer;
    transition: background 0.3s;
    }

    .toggle-button.active {
    background: #1e90ff;
    }

    .toggle-button:not(.active):hover {
    background: rgba(30, 144, 255, 0.2);
    }

    .toggle-label {
    font-size: 18px;
    color: #ffffff;
    text-align: center;
    }

    .input-group label {
    display: block;
    color: #ffffff;
    margin-bottom: 5px;
    }

    .input-group input[type="text"] {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 8px;
    background: rgba(255,255,255,0.2);
    color: #ffffff;
    }

    .button-group {
    display: flex;
    gap: 10px;
    margin-top: 10px;
    }

    .btn {
    flex: 1;
    background: #1e90ff;
    color: white;
    border: none;
    padding: 10px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s;
    }

    .btn:hover {
    background: #1c86ee;
    transform: translateY(-2px);
    }

    .progress-container {
    height: 20px;
    background: rgba(255,255,255,0.2);
    border-radius: 10px;
    overflow: hidden;
    margin: 20px 0;
    }

    .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #1e90ff, #00bfff);
    transition: width 0.3s ease;
    }

    .status-message {
    color: #ffffff;
    margin: 10px 0;
    min-height: 24px;
    text-align: center;
    }

    .finished-panel {
    background: #28a745;
    color: white;
    padding: 10px;
    border-radius: 8px;
    text-align: center;
    margin-top: 20px;
    animation: fadeIn 0.5s;
    }

    @@keyframes fadeIn {
    from

    {
    opacity: 0;
    }

    to {
    opacity: 1;
    }

    }

    .file-path {

    margin-top: 10px;
    text-align: center;
    }
    /* تنسيق عناصر قسم الراندوم */
    .random-wrapper {
    margin-bottom: 20px;
    text-align: left;
    }

    .random-label {
    display: block;
    font-size: 18px;
    font-weight: bold;
    color: #ffffff;
    margin-bottom: 8px;
    text-align: left;
    }

    .random-container {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 10px;
    }

    .random-result {
    font-size: 16px;
    min-width: 150px;
    text-align: left;
    color: #ffffff;
    }

    .random-btn {
    background: linear-gradient(45deg, #6a11cb, #2575fc);
    color: #fff;
    border: none;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    cursor: pointer;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease, transform 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    outline: none;
    }

    .random-btn:hover {
    transform: scale(1.1);
    background: linear-gradient(45deg, #2575fc, #6a11cb);
    }
</style>
<div class="language-selector">
    <div class="lang-toggle">
        <button class="lang-btn" @onclick='()=>SetLang("ar")'>
            العربية
        </button>

        <button class="lang-btn" @onclick='()=>SetLang("en")'>
            English
        </button>
    </div>
</div>

<div class="container">



    <h2 class="title">@Lang["Title"]</h2>

    <div class="alert-container" style="@(isAlertVisible ? "display: block;" : "display: none;")">
        <div class="alert">
            @alertMessage
        </div>
    </div>


    @if(currentLang is "ar")
    {
        <div class="input-group toggle-group">
            <div class="toggle-buttons">
                <button class="toggle-button @(isEncryption ? "active" : "")" @onclick="(() => { isEncryption = true; })">
                    @Lang["Encrypt"]
                </button>
                <button class="toggle-button @(!isEncryption ? "active" : "")" @onclick="(() => { isEncryption = false; })">
                    @Lang["Decrypt"]
                </button>
            </div>
            <label class="toggle-label"> @Lang["SelectOperation"]</label>
        </div>
    }
    else
    {
        <div class="input-group toggle-group">
            <label class="toggle-label"> @Lang["SelectOperation"]</label>

            <div class="toggle-buttons">
                <button class="toggle-button @(isEncryption ? "active" : "")" @onclick="(() => { isEncryption = true; })">
                    @Lang["Encrypt"]
                </button>
                <button class="toggle-button @(!isEncryption ? "active" : "")" @onclick="(() => { isEncryption = false; })">
                    @Lang["Decrypt"]
                </button>
            </div>
        </div>
    }


    <div class="input-group">
        <label>@Lang["SelectFileOrFolder"]:</label>
        <input type="text" placeholder=@Lang["PlaceHolderPath"] @bind="selectedPath" readonly />
        <div class="button-group">
            <button class="btn" @onclick="PickFile"> @Lang["File"]</button>
            <button class="btn" @onclick="PickFolder"> @Lang["Folder"]</button>
        </div>
    </div>

    <div class="input-group">
        <label>@Lang["Password"]:</label>
        <input type="text" placeholder=@Lang["Password"] @bind="password" />
    </div>

    @if (isEncryption)
    {
        <div class="random-wrapper">
            <label class="random-label">@Lang["RandomPassword"]</label>
            <div class="random-container">
                <button @onclick="RandomPassword" class="random-btn">
                    <i class="fa fa-random"></i>
                </button>
                <label class="random-result" id="randomResult">@RandomRusslt</label>
            </div>
        </div>

        <div class="input-group">
            <label>@Lang["ConfirmPassword"]:</label>
            <input type="text" placeholder=@Lang["ConfirmPassword"] @bind="confirmPassword" />
        </div>
    }

    <button class="btn" @onclick="StartProcess" disabled="@isProcessing">@Lang["StartProcess"]</button>

    @if (showProgress)
    {
        <div  class="progress-container">
            <div class="progress-bar" style="width: @(progressPercent)%"></div>
        </div>
    }

    @if (!processFinished)
    {
        <div class="status-message" >@currentStatus </div>
    }
    else if (!string.IsNullOrEmpty(finishedMessage))
    {
        <div class="finished-panel" >@finishedMessage</div>
    }

    @if (!string.IsNullOrEmpty(outputPath))
    {
        <div class="file-path"  >
            📁 @Lang["NewPath"] @outputPath
        </div>
    }
</div>

@code {
    private string RandomRusslt = string.Empty;
    private bool isEncryption = true;
    private string selectedPath = "";
    private bool isFolder = false;
    private string password = "";
    private string confirmPassword = "";
    private string currentStatus = "";
    private string outputPath = "";
    private double progressPercent = 0;
    private bool showProgress = false;
    private bool isProcessing = false;
    private bool processFinished = false;
    private string finishedMessage = "";
    private bool isAlertVisible = false;
    private string alertMessage = string.Empty;
    private string currentLang = "ar";
    private List<string> SkipedFiles = new List<string>();
    private bool IsCanceld = false;
    private string green = "color: #ffffff;";
    private string red = "color: #D2122E;";
    private string currentColor = string.Empty;

    protected override void OnInitialized()
    {
        SetLang("ar");
        EncriptionService.ProgressChanged += (s, e) =>
        {
            progressPercent = e.ProgressPercentage;
            currentStatus = e.UserState?.ToString();
            
            if (currentStatus == "acess")
            {
                IsCanceld = true;
                EncriptionService.iscancel = true;
            }
            if (currentStatus.Contains("skiped"))
            {
                SkipedFiles.Add(currentStatus.Replace("file skiped :", string.Empty));
            }
            InvokeAsync(StateHasChanged);
        };

        EncriptionService.RunWorkerCompleted += (s, e) =>
        {

            isProcessing = false;
            showProgress = false;
            string _SkipedFiles = string.Empty;
            if (EncriptionService.IsWorngPassword)
            {
                EncriptionService.IsWorngPassword = false; 
                IsCanceld = false;
                processFinished = true;
                currentStatus = "";
                outputPath = string.Empty;
                SkipedFiles.Clear();
                currentColor = red;
                IsCanceld = false;
                finishedMessage = Lang["WorngPassword"];
                InvokeAsync(StateHasChanged);
                return;

            }
             else if (IsCanceld)
            {
                processFinished = true;
                currentStatus = "";
                outputPath = string.Empty;
                SkipedFiles.Clear();
                currentColor = red;
                IsCanceld = false;
                EncriptionService.iscancel = false;
                finishedMessage = Lang["noacess"];
                InvokeAsync(StateHasChanged);

            }
            else
            {
                foreach (var item in SkipedFiles)
                {
                    _SkipedFiles += item + "\t";
                }
                currentColor = green;
                finishedMessage = isEncryption ? @Lang["SuccessEncrypt"] + Lang["SkipedFiles"] + $@" {SkipedFiles.Count}" : @Lang["SuccessDecrypt"] + Lang["SkipedFiles"] + $@" {SkipedFiles.Count}";
                SkipedFiles.Clear();
                processFinished = true;
                currentStatus = "";
                InvokeAsync(StateHasChanged);
            }
         
        };
    }


    private async Task RandomPassword()
    {
        string text = string.Empty;
        char[] chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".ToCharArray();
        Random random = new Random();
        for (int x = 0; x < 5; x++)
        {
            text += chars[random.Next(chars.Length)];
        }
        RandomRusslt = text;
        password = text;
        confirmPassword = text;
        StateHasChanged();
        await Clipboard.Default.SetTextAsync(text);
        await ShowAlert("Copyied", 1500);
    }

    private async Task ShowAlert(string message, int duration = 3000)
    {
        alertMessage = message;
        isAlertVisible = true;
        StateHasChanged();

        await Task.Delay(duration);

        isAlertVisible = false;
        StateHasChanged();
    }

    private async Task PickFile()
    {
        try
        {
            var result = await FilePicker.Default.PickAsync();
            if (result != null)
            {
                selectedPath = result.FullPath;
                isFolder = false;
            }
        }
        catch (Exception ex)
        {
            currentStatus = @Lang["Error_InvalidPath"] + " "+ ex.Message;
        }
    }

    private async Task PickFolder()
    {
        try
        {
            var result = await FolderPicker.Default.PickAsync();
            if (result != null && result.Folder != null)
            {
                selectedPath = result.Folder.Path;
                isFolder = true;
            }
        }
        catch (Exception ex)
        {
            currentStatus = @Lang["Error_InvalidPath"]  + " " + ex.Message;
        }
    }
    private void SetLang(string lang)
    {
        Lang.SetLanguage(lang);
        currentLang = lang;
        StateHasChanged();
    }

    private void StartProcess()
    {
        if (string.IsNullOrEmpty(selectedPath) || string.IsNullOrEmpty(password))
        {
            currentStatus = @Lang["Error_NoPathandPassword"];
            return;
        }
        if (isEncryption && password != confirmPassword)
        {
            currentStatus = @Lang["Error_PasswordMismatch"];
            return;
        }

        isProcessing = true;
        showProgress = true;
        processFinished = false;
        finishedMessage = "";
        currentStatus = isEncryption ? Lang["EncryptionPros"] : Lang["DecryptionPros"];

        if (isEncryption)
        {
            if (!isFolder)
                outputPath = selectedPath + (selectedPath.EndsWith(".encrypted") ? "" : ".encrypted");
            else
                outputPath = selectedPath + "_enc";
        }
        else
        {
            if (!isFolder)
                outputPath = selectedPath.EndsWith(".encrypted") ? selectedPath.Substring(0, selectedPath.Length - ".encrypted".Length) : selectedPath;
            else
                outputPath = selectedPath.EndsWith("_enc") ? selectedPath.Substring(0, selectedPath.Length - "_enc".Length) : selectedPath;
        }

        EncriptionService.Start(selectedPath, password, isEncryption, isFolder);
    }
}
